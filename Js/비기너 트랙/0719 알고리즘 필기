function solution(n) {
  return Array(n)
    .fill()
    .map((_, i) => i + 1)
    .filter((v) => v % 2 === 0)
    .reduce((a, c) => a + c);
}
// 단계별로 나눠서 설명

// Array(n):
// 길이가 n인 배열을 생성합니다. 생성된 배열은 요소가 undefined로 채워져 있습니다.

// .fill():
// 배열의 모든 요소를 undefined로 채웁니다. 이 단계는 사실상 필요하지 않지만, 배열을 초기화하는 역할을 합니다.

// .map((_, i) => i + 1):
// 배열의 각 요소에 대해 map 함수를 사용합니다.
// (_, i)에서 _는 요소 자체(여기서는 undefined)를 무시하고, i는 인덱스입니다.
// 인덱스를 1부터 시작하도록 변환하여 1부터 n까지의 숫자를 생성합니다.

// .filter((v) => v % 2 === 0):
// filter 함수를 사용하여 배열에서 짝수만을 추출합니다.
// (v) => v % 2 === 0는 배열의 각 요소 v가 2로 나누어 떨어지는지 확인합니다.

// .reduce((a, c) => a + c):
// reduce 함수를 사용하여 짝수의 합을 계산합니다.
// a는 누적값(accumulator), c는 현재 값(current value)입니다.
// a + c는 누적값에 현재 값을 더합니다.

// 원래 알고있던 방법1
function solution(array, height) {
  let count = 0;
  for (i of array) {
    // 이런식으로 조건문 가능 'of문'
    if (i > height) {
      count += 1;
    }
  }
  return count;
}

// 새로운 방법
function solution(array, height) {
  return array.filter((v) => v > height).length;
}
